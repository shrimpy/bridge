{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","style","display","justifyContent","window","location","origin","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","main","a","setupClient","ReactDOM","render","StrictMode","document","getElementById","ClientSampleResolver","name","inputs","from","Promise","resolver","setTimeout","data","message","client","Client","registerResolver","setup","console","log","invokeResolver","response","JSON","stringify","subscribe","broadcastEvent"],"mappings":"wLAUeA,MARf,WACE,OACE,qBAAKC,MAAO,CAAEC,QAAS,OAAQC,eAAgB,UAA/C,SACE,gDAAmBC,OAAOC,SAASC,aCS1BC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCHRQ,EAAI,uCAAG,sBAAAC,EAAA,sEACLC,IADK,OAEXC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,gBAM1BhB,IAZW,2CAAH,qDAeJiB,E,iDACGC,KAAe,uB,wCAEtB,SAAYC,EAA6BC,GACvC,OAAO,IAAIC,SAAQ,SAACC,GAClBC,YAAW,WACTD,EAAS,CAAEE,KAAK,qBAAD,OAAuB3B,OAAOE,OAA9B,cAA0CoB,EAAOM,aAC/D,Y,KAKHd,EAAW,uCAAG,8BAAAD,EAAA,6DACZgB,EAAS,IAAIC,SAAO9B,SACnB+B,iBAAiB,IAAIX,GAFV,SAGZS,EAAOG,QAHK,cAKlBC,QAAQC,IAAR,kBAAuBlC,OAAOE,OAA9B,8BALkB,SAOK2B,EAAOM,eAAuB,qBAAsB,OAAQ,CAAEP,QAAS,wBAP5E,OAOZQ,EAPY,OAQlBH,QAAQC,IAAR,kBAAuBlC,OAAOE,OAA9B,uCAAmEmC,KAAKC,UAAUF,KAElFP,EAAOU,UAAU,cAAc,SAACjB,GAC9BW,QAAQC,IAAI,oBAAqBZ,MAGnCI,YAAW,WACTG,EAAOW,eAAe,eAAgB,oBACrC,KAhBe,4CAAH,qDAmBjB5B,M","file":"static/js/main.23430da7.chunk.js","sourcesContent":["import React from 'react';\n\nfunction App() {\n  return (\n    <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n      <p>Client Origin: {window.location.origin}</p>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Client, IResolver } from 'fesoa-bridge';\n\nconst main = async () => {\n  await setupClient();\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById('client-root')\n  );\n\n  // If you want to start measuring performance in your app, pass a function\n  // to log results (for example: reportWebVitals(console.log))\n  // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n  reportWebVitals();\n};\n\nclass ClientSampleResolver implements IResolver {\n  public name: string = \"ClientSampleResolver\";\n\n  public echo(inputs: { message: string }, from: string): Promise<any> {\n    return new Promise((resolver) => {\n      setTimeout(() => {\n        resolver({ data: `echo from client (${window.origin}): ${inputs.message}` });\n      }, 500);\n    });\n  }\n}\n\nconst setupClient = async () => {\n  const client = new Client(window);\n  client.registerResolver(new ClientSampleResolver());\n  await client.setup();\n\n  console.log(`Client (${window.origin}) ===> Client: connected.`);\n\n  const response = await client.invokeResolver<string>(\"HostSampleResolver\", \"echo\", { message: \"message from client\" });\n  console.log(`Client (${window.origin}) ===> RESPONSE from host > ${JSON.stringify(response)}`);\n\n  client.subscribe(\"host-event\", (inputs: any) => {\n    console.log(\"Client - sub ===>\", inputs);\n  });\n\n  setTimeout(() => {\n    client.broadcastEvent(\"client-event\", \"Diamond Hands!\");\n  }, 1000);\n};\n\nmain();"],"sourceRoot":""}